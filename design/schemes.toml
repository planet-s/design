[SPC-schemes]
partof = "REQ-1-schemes"
text = '''
Schemes are the primary communication mechanism between system programs
in redox. It facilitates communication between:
- the kernel and drivers, such as the `irq` scheme
- drivers and low level interfaces, such as `ethernetd` using the `network`
  scheme (which is created directly from the driver)
- VERIFY: low level interfaces and higher level interfaces layers, such as the
  `ipd` scheme building on the `ethernet` scheme, and `tcp` scheme building on
  the `ipd` scheme.
- VERIFY: userspace programs and system level interfaces, such as the orbital
  window manager's scheme.

In order to add a scheme to redox, a developer can either:
1. open the scheme from the root scheme and then treat it as a 
  `std::fs::File` (**VERIFY** `File` implements `Scheme`)
```
let fd = syscall::open(
    ":network", 
    syscall::O_RDWR | syscall::O_CREAT | syscall::O_NONBLOCK)
    .expect( "e1000d: failed to create network scheme")
let socket = unsafe { File::from_raw_fd(socket_fd) };
```
2. implement the `redox_syscall::Scheme` trait from [redox_syscall][1]
   on a custom struct. 

Option #2 has the benefit that it gives you complete control over how
the scheme handles every request. It can operate like a file, socket or
something else entirely. It can handle creating or deleting files, directories,
etc. It does not have to follow "normal" file system rules.

For instance, the window manager orbital uses a scheme in order to render the
GUI. TODO: explain at a high level how orbital works and why you couldn't do
the same thing using unix files/sockets.

[1]: https://github.com/redox-os/syscall
'''

[SPC-schemes-kernel]
text = '''
Most schemes should be in user space, however a few are impelmented in kernel
space. (TODO: there is going to be a manpage for these):
- env: TODO no idea, something to query paths?
- event: TODO probably handline events of some kind. How? What do the paths
  represent. No `write` method provided so only for reading events. Looks
  like it might be for reading kernel events?
- initfs: VERIFY the initial ramfs for the init system to use
- `irq:#`: open a socket to handle the #'th IRQ, more information in
  [[SPC-drivers-irq]]
- live: TODO: no idea, something with disks
- memory: returns fstatvfs, which is information on the available memory
  in the system.
- null: same as /dev/null in unix, works as a sink for any data
- pipe: open a unix style pipe with input+output. TODO: API is not apparent
- root: VERIFY the root scheme `:` also called the registrar. This is interface
  for registering new schemes and **VERIFY: also hosts the file system**
- sys: scheme for getting information on the system such as cpu, memory, exe 
  and context (TODO: what are those last ones?)
- user: VERIFY: create, modify and list users
- zero: same as /dev/zero in unix, works as a source for a u8 stream of zeroes

Example Userspace Schemes:
- redoxfs: the scheme that supports the redox filesystem
- orbital: the Desktop is rendered using only a scheme
- ethernet -> ipd -> udp + tcp: these schemes build on eachother and
  are ALL in userspace. In fact, the entire networking stack (including the
  driver) is located in userspace.
- TODO: more examples here would be good
'''

[SPC-schemes-url]
text = ''' 
Url's shall be the data structure which can be opened to schemes in the kernel.
From the user perspective they are a C-like null-terminating string of the form
`"scheme:path/to/reference"`. Under the hood they are represented as one of the
following:
- `Url<'a>`: The simplest one, just a struct containing two fat pointers,
  representing the scheme and the reference respectively. Similar to
  `std::Path::Path`
- `OwnedUrl`: This is a struct containing two Strings (that is, growable,
  heap-allocated UTF-8 string), being the scheme and the reference
  respectively. Similar to `std::path::PathBuf`.
- `CowUrl<'a>`: This is a Copy-on-Write (CoW) URL, which, when mutated, gets
  cloned to heap in order to have efficient conditional allocation of the URL.

These will give the greatest flexibility and performance when dealing with Url's
in kernel space.
'''
