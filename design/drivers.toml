
[SPC-drivers]
partof = "REQ-1-drivers"
text = '''
This specification defines the API for how hardware driver's can be implemented
in user space by using only syscalls (drivers do not need to be implemented
in kernel space). Technically these are handled purely through the
[[SPC-syscalls]] ABI, but drivers are an important enough part of the redox
story to justify their own specification documents.

The typical process for implementing a device driver is:
- [[SPC-drivers-mem]]: Reserve the physical memory of the hardware device with
  the relevant `phys*` syscalls.
- [[SPC-schemes-kernel-irq]]: Open the interrupt handler via the irq scheme by
  calling the syscal `open("irq:#")` where `#` is the interrupt to be
  queried/handled.
- **TODO**: put more details this out more when
  https://github.com/redox-os/drivers/pull/3 is flushed out.
'''

[SPC-drivers-mem]
text = '''
In order to develop device drivers a process must be able to read and write to
physical memory. The syscalls for dealing with physical memory in userspace
are:
- `physalloc`: Allocate pages linearly in physical memory
- `physfree`: Free physically allocated pages 
- `physmap`: Map physical memory to virtual memory
- `physunmap`: Unmap previously mapped physical memory
- `virttophys`: Convert a virtual address to a physical one

> Interrupt handling is defined in [[SPC-drivers-irq]].

## Types of Memory
Before understanding physical memory, it is important to understand the
basic types of memory that the kernel manages:
- user virtual addresses: "regular memory addresses" as seen by userspace
  programs. Virtual memory gives tons of benefits for most programs, such as
  protection from fragmentation and the ability to allocate more memory than
  what exists (using drive swapping, etc).
- physical addresses: the actual physical addresses used between the processor
  and the system's hardware memory manager.
- bus addresses: addresses used between the peripheral buses and memory. These
  are *often* the same as the physical addresses, but are architecture
  dependent.
- VERIFY: **kernel logical+virtual** addresses do not exist in redox

## Basics of Driver Development
The way that most (all?) device drivers communicate with drivers is by
using a specific physical address range of memory and triggering interrupts. 

We will use the basic implementation of the ethernet (e100d) driver as an 
example of how a driver might be implemented: **TODO** this would help improve
understanding significantly.
'''

[TST-drivers]
text = '''
A hardware can be thought of as "just" an object which:
- writes and reads to/from physical memory
- generates interrupts

The redox kernel therefore allows userspace programs to completely mock any
hardware devices by using the following method:
- [[SPC-drivers-mem]]: reserving physical memory using syscalls. Note that
  physical memory reserved this way *can overlap with other processes*.
- trigger interrupts with `int 0x20 to 0x2F` in assembler

With these two features it is possible to mock device drivers in userspace. 
Therefore drivers developed for redox should ship with a suite of tests that do
something like the following:
- Create a "mock" device by reserving physical memory and pretending to be the
  actual device's registers, etc.
- Initialize an ACTUAL driver that interfaces with the mock's address range
  (but probably uses a scheme with `test` inserted in front of it so that it can
  exist side-by-side with the real driver+scheme)
- Send mock data over the mock device by writing to the fake registers and
  enabling any necessary interrupts
- Use the actual driver to handle the interrupts/etc and make assertions about
  how it handles them.

These tests will should be run as system tests as well as be available for
users to run on their personal systems to valdate that all their drivers fit
together as they expect.
'''
